name: Backend Unit Tests

on:
  pull_request:
  push:
    branches:
      - main
      - release-*.*.*

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}

permissions: {}

jobs:
  grafana:
    # Run this workflow only for PRs from forks
    # the `pr-backend-unit-tests-enterprise` workflow will run instead
    if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == true
    strategy:
      matrix:
        shard: [
          1/8, 2/8, 3/8, 4/8,
          5/8, 6/8, 7/8, 8/8,
        ]
      fail-fast: false

    name: Grafana (${{ matrix.shard }})
    runs-on: ubuntu-latest-8-cores
    continue-on-error: true
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: Generate Go code
        run: make gen-go
      - name: Run unit tests
        env:
          SHARD: ${{ matrix.shard }}
        run: |
          set -euo pipefail
          readarray -t PACKAGES <<< "$(./scripts/ci/backend-tests/shard.sh -N"$SHARD")"
          go test -short -timeout=30m "${PACKAGES[@]}"

  grafana-enterprise:
    # Run this workflow for non-PR events (like pushes to `main` or `release-*`) OR for internal PRs (PRs not from forks)
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false
    strategy:
      matrix:
        shard: [
          1/8, 2/8, 3/8, 4/8,
          5/8, 6/8, 7/8, 8/8,
        ]
      fail-fast: false

    name: Grafana Enterprise (${{ matrix.shard }})
    runs-on: ubuntu-latest-8-cores
    permissions:
      contents: read # to clone repo
      id-token: write # required for enterprise & AWS
    env:
      GOCACHE_HTTP: 'localhost:12345'
      GOCACHE_MODPROXY: 'true'
      GOCACHE_PLUGIN: '1234'
      GOCACHE_S3_BUCKET: 'grafana-cicd-gha-cache-workloads-prod'
      GOCACHE_S3_REGION: 'us-east-2'
      GOCACHE_METRICS: 'true'
      GOCACHE_DIR: '/tmp/gocache'
      GOCACHEPROG: go-cache-plugin connect 1234
      GOPROXY: 'http://localhost:12345/mod'
      GOSUMDB: 'sum.golang.org http://localhost:12345/mod/sumdb/sum.golang.org'
    steps:
      - name: Auth to AWS
        uses: grafana/shared-workflows/actions/aws-auth@aws-auth/v1.0.2
        with:
          aws-region: "us-east-2"
          pass-claims: "repository_owner, repository_name, job_workflow_ref, ref, event_name"
          set-creds-in-environment: true
          role-arn: 'arn:aws:iam::422075448034:role/github-actions/grafana-cicd'
      - name: Install go-cache-plugin
        env:
          GOCP_VERSION: 'v0.1.1'
          GOCP_OS: 'linux-amd64'
          GOCP_HASH: 'b945e1b76e3020732be19561d161067535e55d12a0d222a2045ea8429bf8bc88'
        run: |
          set -xeuo pipefail
          curl -LO https://github.com/grafana/go-cache-plugin/releases/download/"$GOCP_VERSION"/go-cache-plugin-"$GOCP_OS"
          mv go-cache-plugin-"$GOCP_OS" go-cache-plugin
          echo -e "$GOCP_HASH\tgo-cache-plugin" | sha256sum --check
          chmod +x go-cache-plugin
          file go-cache-plugin
          sudo mv go-cache-plugin /bin/go-cache-plugin # move to PATH
          go-cache-plugin version || true # success returns exit code 2
          go-cache-plugin serve &

      # Set up repository clone
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: false # download Go from the action super quickly. use S3 cache for code & modules.
      - name: Setup Enterprise
        uses: ./.github/actions/setup-enterprise
        with:
          github-app-name: 'grafana-ci-bot'

      # Run code
      - name: Generate Go code
        run: make gen-go
      - name: Run unit tests
        env:
          SHARD: ${{ matrix.shard }}
        run: |
          set -euo pipefail

          readarray -t PACKAGES <<< "$(./scripts/ci/backend-tests/shard.sh -N"$SHARD")"
          go test -short -timeout=30m "${PACKAGES[@]}"

  # This is the job that is actually required by rulesets.
  # We need to require EITHER the OSS or the Enterprise job to pass.
  # However, if one is skipped, GitHub won't flat-map the shards,
  #   so they won't be accepted by a ruleset.
  required-backend-unit-tests:
    needs:
      - grafana
      - grafana-enterprise
    # always() is the best function here.
    # success() || failure() will skip this function if any need is also skipped.
    # That means conditional test suites will fail the entire requirement check.
    if: always()

    name: All backend unit tests complete
    runs-on: ubuntu-latest
    steps:
      - name: Check test suites
        env:
          NEEDS: ${{ toJson(needs) }}
        run: |
          FAILURES="$(echo "$NEEDS" | jq 'with_entries(select(.value.result == "failure")) | map_values(.result)')"
          echo "$FAILURES"
          if [ "$(echo "$FAILURES" | jq '. | length')" != "0" ]; then
            exit 1
          fi
          echo "All OK!"
