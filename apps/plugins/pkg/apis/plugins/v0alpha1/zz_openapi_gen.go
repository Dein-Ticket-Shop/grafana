//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by grafana-app-sdk. DO NOT EDIT.

package v0alpha1

import (
	common "k8s.io/kube-openapi/pkg/common"
	spec "k8s.io/kube-openapi/pkg/validation/spec"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.Plugin":                                    schema_pkg_apis_plugins_v0alpha1_Plugin(ref),
		"github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginDependencies":                        schema_pkg_apis_plugins_v0alpha1_PluginDependencies(ref),
		"github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginEnterpriseFeatures":                  schema_pkg_apis_plugins_v0alpha1_PluginEnterpriseFeatures(ref),
		"github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginExtensions":                          schema_pkg_apis_plugins_v0alpha1_PluginExtensions(ref),
		"github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginIAM":                                 schema_pkg_apis_plugins_v0alpha1_PluginIAM(ref),
		"github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginInclude":                             schema_pkg_apis_plugins_v0alpha1_PluginInclude(ref),
		"github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginInfo":                                schema_pkg_apis_plugins_v0alpha1_PluginInfo(ref),
		"github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginInstall":                             schema_pkg_apis_plugins_v0alpha1_PluginInstall(ref),
		"github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginInstallList":                         schema_pkg_apis_plugins_v0alpha1_PluginInstallList(ref),
		"github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginInstallSpec":                         schema_pkg_apis_plugins_v0alpha1_PluginInstallSpec(ref),
		"github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginInstallStatus":                       schema_pkg_apis_plugins_v0alpha1_PluginInstallStatus(ref),
		"github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginInstallstatusOperatorState":          schema_pkg_apis_plugins_v0alpha1_PluginInstallstatusOperatorState(ref),
		"github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginJSONData":                            schema_pkg_apis_plugins_v0alpha1_PluginJSONData(ref),
		"github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginList":                                schema_pkg_apis_plugins_v0alpha1_PluginList(ref),
		"github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginQueryOptions":                        schema_pkg_apis_plugins_v0alpha1_PluginQueryOptions(ref),
		"github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginRole":                                schema_pkg_apis_plugins_v0alpha1_PluginRole(ref),
		"github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginRoute":                               schema_pkg_apis_plugins_v0alpha1_PluginRoute(ref),
		"github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginSpec":                                schema_pkg_apis_plugins_v0alpha1_PluginSpec(ref),
		"github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginStatus":                              schema_pkg_apis_plugins_v0alpha1_PluginStatus(ref),
		"github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginV0alpha1DependenciesExtensions":      schema_pkg_apis_plugins_v0alpha1_PluginV0alpha1DependenciesExtensions(ref),
		"github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginV0alpha1DependenciesPlugins":         schema_pkg_apis_plugins_v0alpha1_PluginV0alpha1DependenciesPlugins(ref),
		"github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginV0alpha1ExtensionsAddedComponents":   schema_pkg_apis_plugins_v0alpha1_PluginV0alpha1ExtensionsAddedComponents(ref),
		"github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginV0alpha1ExtensionsAddedLinks":        schema_pkg_apis_plugins_v0alpha1_PluginV0alpha1ExtensionsAddedLinks(ref),
		"github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginV0alpha1ExtensionsExposedComponents": schema_pkg_apis_plugins_v0alpha1_PluginV0alpha1ExtensionsExposedComponents(ref),
		"github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginV0alpha1ExtensionsExtensionPoints":   schema_pkg_apis_plugins_v0alpha1_PluginV0alpha1ExtensionsExtensionPoints(ref),
		"github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginV0alpha1IAMPermissions":              schema_pkg_apis_plugins_v0alpha1_PluginV0alpha1IAMPermissions(ref),
		"github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginV0alpha1InfoAuthor":                  schema_pkg_apis_plugins_v0alpha1_PluginV0alpha1InfoAuthor(ref),
		"github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginV0alpha1InfoBuild":                   schema_pkg_apis_plugins_v0alpha1_PluginV0alpha1InfoBuild(ref),
		"github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginV0alpha1InfoLinks":                   schema_pkg_apis_plugins_v0alpha1_PluginV0alpha1InfoLinks(ref),
		"github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginV0alpha1InfoLogos":                   schema_pkg_apis_plugins_v0alpha1_PluginV0alpha1InfoLogos(ref),
		"github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginV0alpha1InfoScreenshots":             schema_pkg_apis_plugins_v0alpha1_PluginV0alpha1InfoScreenshots(ref),
		"github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginV0alpha1RoleRole":                    schema_pkg_apis_plugins_v0alpha1_PluginV0alpha1RoleRole(ref),
		"github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginV0alpha1RoleRolePermissions":         schema_pkg_apis_plugins_v0alpha1_PluginV0alpha1RoleRolePermissions(ref),
		"github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginV0alpha1RouteJwtTokenAuth":           schema_pkg_apis_plugins_v0alpha1_PluginV0alpha1RouteJwtTokenAuth(ref),
		"github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginV0alpha1RouteTokenAuth":              schema_pkg_apis_plugins_v0alpha1_PluginV0alpha1RouteTokenAuth(ref),
		"github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginV0alpha1RouteUrlParams":              schema_pkg_apis_plugins_v0alpha1_PluginV0alpha1RouteUrlParams(ref),
		"github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginstatusOperatorState":                 schema_pkg_apis_plugins_v0alpha1_PluginstatusOperatorState(ref),
	}
}

func schema_pkg_apis_plugins_v0alpha1_Plugin(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Spec is the spec of the Plugin",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginStatus"),
						},
					},
				},
				Required: []string{"metadata", "spec", "status"},
			},
		},
		Dependencies: []string{
			"github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginSpec", "github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_plugins_v0alpha1_PluginDependencies(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"grafanaDependency": {
						SchemaProps: spec.SchemaProps{
							Description: "Required field",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"grafanaVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional fields",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"plugins": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"id",
								},
								"x-kubernetes-list-type": "set",
							},
						},
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginV0alpha1DependenciesPlugins"),
									},
								},
							},
						},
					},
					"extensions": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginV0alpha1DependenciesExtensions"),
						},
					},
				},
				Required: []string{"grafanaDependency"},
			},
		},
		Dependencies: []string{
			"github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginV0alpha1DependenciesExtensions", "github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginV0alpha1DependenciesPlugins"},
	}
}

func schema_pkg_apis_plugins_v0alpha1_PluginEnterpriseFeatures(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"healthDiagnosticsErrors": {
						SchemaProps: spec.SchemaProps{
							Description: "Allow additional properties",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_plugins_v0alpha1_PluginExtensions(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"addedComponents": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginV0alpha1ExtensionsAddedComponents"),
									},
								},
							},
						},
					},
					"addedLinks": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginV0alpha1ExtensionsAddedLinks"),
									},
								},
							},
						},
					},
					"exposedComponents": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"id",
								},
								"x-kubernetes-list-type": "set",
							},
						},
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginV0alpha1ExtensionsExposedComponents"),
									},
								},
							},
						},
					},
					"extensionPoints": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"id",
								},
								"x-kubernetes-list-type": "set",
							},
						},
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginV0alpha1ExtensionsExtensionPoints"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginV0alpha1ExtensionsAddedComponents", "github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginV0alpha1ExtensionsAddedLinks", "github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginV0alpha1ExtensionsExposedComponents", "github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginV0alpha1ExtensionsExtensionPoints"},
	}
}

func schema_pkg_apis_plugins_v0alpha1_PluginIAM(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"permissions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginV0alpha1IAMPermissions"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginV0alpha1IAMPermissions"},
	}
}

func schema_pkg_apis_plugins_v0alpha1_PluginInclude(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"uid": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"component": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"role": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"action": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"path": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"addToNav": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"defaultNav": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"icon": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_plugins_v0alpha1_PluginInfo(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"keywords": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "set",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Required fields",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"logos": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginV0alpha1InfoLogos"),
						},
					},
					"updated": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"author": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional fields",
							Ref:         ref("github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginV0alpha1InfoAuthor"),
						},
					},
					"build": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginV0alpha1InfoBuild"),
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"links": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginV0alpha1InfoLinks"),
									},
								},
							},
						},
					},
					"screenshots": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginV0alpha1InfoScreenshots"),
									},
								},
							},
						},
					},
				},
				Required: []string{"keywords", "logos", "updated", "version"},
			},
		},
		Dependencies: []string{
			"github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginV0alpha1InfoAuthor", "github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginV0alpha1InfoBuild", "github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginV0alpha1InfoLinks", "github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginV0alpha1InfoLogos", "github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginV0alpha1InfoScreenshots"},
	}
}

func schema_pkg_apis_plugins_v0alpha1_PluginInstall(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Spec is the spec of the PluginInstall",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginInstallSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginInstallStatus"),
						},
					},
				},
				Required: []string{"metadata", "spec", "status"},
			},
		},
		Dependencies: []string{
			"github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginInstallSpec", "github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginInstallStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_plugins_v0alpha1_PluginInstallList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginInstall"),
									},
								},
							},
						},
					},
				},
				Required: []string{"metadata", "items"},
			},
		},
		Dependencies: []string{
			"github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginInstall", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_plugins_v0alpha1_PluginInstallSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "spec is the schema of our resource",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"id": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
				},
				Required: []string{"id", "version"},
			},
		},
	}
}

func schema_pkg_apis_plugins_v0alpha1_PluginInstallStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"operatorStates": {
						SchemaProps: spec.SchemaProps{
							Description: "operatorStates is a map of operator ID to operator state evaluations. Any operator which consumes this kind SHOULD add its state evaluation information to this field.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginInstallstatusOperatorState"),
									},
								},
							},
						},
					},
					"additionalFields": {
						SchemaProps: spec.SchemaProps{
							Description: "additionalFields is reserved for future use",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"object"},
										Format: "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginInstallstatusOperatorState"},
	}
}

func schema_pkg_apis_plugins_v0alpha1_PluginInstallstatusOperatorState(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"lastEvaluation": {
						SchemaProps: spec.SchemaProps{
							Description: "lastEvaluation is the ResourceVersion last evaluated",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"state": {
						SchemaProps: spec.SchemaProps{
							Description: "state describes the state of the lastEvaluation. It is limited to three possible states for machine evaluation.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"descriptiveState": {
						SchemaProps: spec.SchemaProps{
							Description: "descriptiveState is an optional more descriptive state field which has no requirements on format",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"details": {
						SchemaProps: spec.SchemaProps{
							Description: "details contains any extra information that is operator-specific",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"object"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"lastEvaluation", "state"},
			},
		},
	}
}

func schema_pkg_apis_plugins_v0alpha1_PluginJSONData(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "JSON configuration schema for Grafana plugins Converted from: https://github.com/grafana/grafana/blob/main/docs/sources/developers/plugins/plugin.schema.json",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"id": {
						SchemaProps: spec.SchemaProps{
							Description: "Unique name of the plugin",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Plugin type",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Human-readable name of the plugin",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"info": {
						SchemaProps: spec.SchemaProps{
							Description: "Metadata for the plugin",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginInfo"),
						},
					},
					"dependencies": {
						SchemaProps: spec.SchemaProps{
							Description: "Dependency information",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginDependencies"),
						},
					},
					"alerting": {
						SchemaProps: spec.SchemaProps{
							Description: "Optional fields",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"annotations": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"autoEnabled": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"backend": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"buildMode": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"builtIn": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"category": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"enterpriseFeatures": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginEnterpriseFeatures"),
						},
					},
					"executable": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"hideFromList": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"includes": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginInclude"),
									},
								},
							},
						},
					},
					"logs": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"metrics": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"multiValueFilterOperators": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"pascalName": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"preload": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"queryOptions": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginQueryOptions"),
						},
					},
					"routes": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginRoute"),
									},
								},
							},
						},
					},
					"skipDataQuery": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"state": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"streaming": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"tracing": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"iam": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginIAM"),
						},
					},
					"roles": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginRole"),
									},
								},
							},
						},
					},
					"extensions": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginExtensions"),
						},
					},
				},
				Required: []string{"id", "type", "name", "info", "dependencies"},
			},
		},
		Dependencies: []string{
			"github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginDependencies", "github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginEnterpriseFeatures", "github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginExtensions", "github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginIAM", "github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginInclude", "github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginInfo", "github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginQueryOptions", "github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginRole", "github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginRoute"},
	}
}

func schema_pkg_apis_plugins_v0alpha1_PluginList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.Plugin"),
									},
								},
							},
						},
					},
				},
				Required: []string{"metadata", "items"},
			},
		},
		Dependencies: []string{
			"github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.Plugin", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_plugins_v0alpha1_PluginQueryOptions(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"maxDataPoints": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"minInterval": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"cacheTimeout": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_plugins_v0alpha1_PluginRole(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"role": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginV0alpha1RoleRole"),
						},
					},
					"grants": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "set",
							},
						},
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginV0alpha1RoleRole"},
	}
}

func schema_pkg_apis_plugins_v0alpha1_PluginRoute(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"path": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"method": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"url": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"reqSignedIn": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"reqRole": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"reqAction": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"headers": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"body": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"object"},
										Format: "",
									},
								},
							},
						},
					},
					"tokenAuth": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginV0alpha1RouteTokenAuth"),
						},
					},
					"jwtTokenAuth": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginV0alpha1RouteJwtTokenAuth"),
						},
					},
					"urlParams": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginV0alpha1RouteUrlParams"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginV0alpha1RouteJwtTokenAuth", "github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginV0alpha1RouteTokenAuth", "github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginV0alpha1RouteUrlParams"},
	}
}

func schema_pkg_apis_plugins_v0alpha1_PluginSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "spec is the schema of our resource",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"pluginJSON": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginJSONData"),
						},
					},
				},
				Required: []string{"pluginJSON"},
			},
		},
		Dependencies: []string{
			"github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginJSONData"},
	}
}

func schema_pkg_apis_plugins_v0alpha1_PluginStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"operatorStates": {
						SchemaProps: spec.SchemaProps{
							Description: "operatorStates is a map of operator ID to operator state evaluations. Any operator which consumes this kind SHOULD add its state evaluation information to this field.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginstatusOperatorState"),
									},
								},
							},
						},
					},
					"additionalFields": {
						SchemaProps: spec.SchemaProps{
							Description: "additionalFields is reserved for future use",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"object"},
										Format: "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginstatusOperatorState"},
	}
}

func schema_pkg_apis_plugins_v0alpha1_PluginV0alpha1DependenciesExtensions(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"exposedComponents": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "set",
							},
						},
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_plugins_v0alpha1_PluginV0alpha1DependenciesPlugins(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"id": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
				},
				Required: []string{"id", "type", "name"},
			},
		},
	}
}

func schema_pkg_apis_plugins_v0alpha1_PluginV0alpha1ExtensionsAddedComponents(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"targets": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "set",
							},
						},
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"title": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"targets", "title"},
			},
		},
	}
}

func schema_pkg_apis_plugins_v0alpha1_PluginV0alpha1ExtensionsAddedLinks(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"targets": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "set",
							},
						},
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"title": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"targets", "title"},
			},
		},
	}
}

func schema_pkg_apis_plugins_v0alpha1_PluginV0alpha1ExtensionsExposedComponents(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"id": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"title": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"id"},
			},
		},
	}
}

func schema_pkg_apis_plugins_v0alpha1_PluginV0alpha1ExtensionsExtensionPoints(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"id": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"title": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"id"},
			},
		},
	}
}

func schema_pkg_apis_plugins_v0alpha1_PluginV0alpha1IAMPermissions(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"action": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"scope": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_plugins_v0alpha1_PluginV0alpha1InfoAuthor(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"email": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"url": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_plugins_v0alpha1_PluginV0alpha1InfoBuild(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"time": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"number"},
							Format: "double",
						},
					},
					"repo": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"branch": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"hash": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"pr": {
						SchemaProps: spec.SchemaProps{
							Description: "number?: number // cannot have field with this name",
							Type:        []string{"number"},
							Format:      "double",
						},
					},
					"build": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"number"},
							Format: "double",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_plugins_v0alpha1_PluginV0alpha1InfoLinks(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"url": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_plugins_v0alpha1_PluginV0alpha1InfoLogos(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"small": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
					"large": {
						SchemaProps: spec.SchemaProps{
							Default: "",
							Type:    []string{"string"},
							Format:  "",
						},
					},
				},
				Required: []string{"small", "large"},
			},
		},
	}
}

func schema_pkg_apis_plugins_v0alpha1_PluginV0alpha1InfoScreenshots(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"path": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_plugins_v0alpha1_PluginV0alpha1RoleRole(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"permissions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginV0alpha1RoleRolePermissions"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/grafana/grafana/apps/plugins/pkg/apis/plugins/v0alpha1.PluginV0alpha1RoleRolePermissions"},
	}
}

func schema_pkg_apis_plugins_v0alpha1_PluginV0alpha1RoleRolePermissions(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"action": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"scope": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_plugins_v0alpha1_PluginV0alpha1RouteJwtTokenAuth(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"url": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"scopes": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "set",
							},
						},
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"params": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"object"},
										Format: "",
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_plugins_v0alpha1_PluginV0alpha1RouteTokenAuth(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"url": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"scopes": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "set",
							},
						},
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"params": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"object"},
										Format: "",
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_plugins_v0alpha1_PluginV0alpha1RouteUrlParams(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"content": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_plugins_v0alpha1_PluginstatusOperatorState(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"lastEvaluation": {
						SchemaProps: spec.SchemaProps{
							Description: "lastEvaluation is the ResourceVersion last evaluated",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"state": {
						SchemaProps: spec.SchemaProps{
							Description: "state describes the state of the lastEvaluation. It is limited to three possible states for machine evaluation.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"descriptiveState": {
						SchemaProps: spec.SchemaProps{
							Description: "descriptiveState is an optional more descriptive state field which has no requirements on format",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"details": {
						SchemaProps: spec.SchemaProps{
							Description: "details contains any extra information that is operator-specific",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"object"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"lastEvaluation", "state"},
			},
		},
	}
}
