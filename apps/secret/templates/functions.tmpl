{{- define "object_v1beta1_SecureValueExposedSecureValue_custom_methods" }}
{{- importStdPkg "fmt" }}
// DangerouslyExposeAndConsumeValue will move the decrypted secure value out of the wrapper and return it.
// Further attempts to call this method will panic.
// The function name is intentionally kept long and weird because this is a dangerous operation and should be used carefully!
func (s *{{ .Object.Name|upperCamelCase }}) DangerouslyExposeAndConsumeValue() string {
    if *s == "" {
        panic("underlying value is empty or was consumed")
    }

    tmp := *s
    *s = ""

    return string(tmp)
}

// String must not return the exposed secure value.
func (s *{{ .Object.Name|upperCamelCase }}) String() string {
    return "[REDACTED]"
}

// Format must not return the exposed secure value.
func (s {{ .Object.Name|upperCamelCase }}) Format(f fmt.State, _verb rune) {
	_, _ = fmt.Fprint(f, "[REDACTED]")
}

// GoString must not return the exposed secure value.
func (s {{ .Object.Name|upperCamelCase }}) GoString() string {
	return "[REDACTED]"
}

// MarshalJSON must not return the exposed secure value.
func (s {{ .Object.Name|upperCamelCase }}) MarshalJSON() ([]byte, error) {
	return []byte(strconv.Quote("[REDACTED]")), nil
}

// MarshalYAML must not return the exposed secure value.
func (s {{ .Object.Name|upperCamelCase }}) MarshalYAML() (any, error) {
	return "[REDACTED]", nil
}

{{- end }}
