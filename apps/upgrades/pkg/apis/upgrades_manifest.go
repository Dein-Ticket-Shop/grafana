//
// This file is generated by grafana-app-sdk
// DO NOT EDIT
//

package apis

import (
	"fmt"

	"github.com/grafana/grafana-app-sdk/app"
	"github.com/grafana/grafana-app-sdk/resource"
	"k8s.io/kube-openapi/pkg/spec3"
	"k8s.io/kube-openapi/pkg/validation/spec"

	v0alpha1 "github.com/grafana/grafana/apps/upgrades/pkg/apis/upgrades/v0alpha1"
)

var appManifestData = app.ManifestData{
	AppName: "upgrades",
	Group:   "upgrades.grafana.app",
	Kinds: []app.ManifestKind{
		{
			Kind:       "UpgradeMetadata",
			Scope:      "Namespaced",
			Conversion: false,
			Versions: []app.ManifestKindVersion{
				{
					Name: "v0alpha1",
					CustomRoutes: map[string]spec3.PathProps{
						"/checkForUpgrades": {
							Get: &spec3.Operation{
								OperationProps: spec3.OperationProps{

									RequestBody: &spec3.RequestBody{
										RequestBodyProps: spec3.RequestBodyProps{

											Required: true,
											Content: map[string]*spec3.MediaType{
												"application/json": {
													MediaTypeProps: spec3.MediaTypeProps{
														Schema: &spec.Schema{
															SchemaProps: spec.SchemaProps{
																Type: []string{"object"},
																Properties: map[string]spec.Schema{
																	"limit": {
																		SchemaProps: spec.SchemaProps{
																			Type: []string{"integer"},
																		},
																	},
																},
																Required: []string{
																	"limit",
																},
															}},
													}},
											},
										}},
									Responses: &spec3.Responses{
										ResponsesProps: spec3.ResponsesProps{
											Default: &spec3.Response{
												ResponseProps: spec3.ResponseProps{
													Description: "Default OK response",
													Content: map[string]*spec3.MediaType{
														"application/json": {
															MediaTypeProps: spec3.MediaTypeProps{
																Schema: &spec.Schema{
																	SchemaProps: spec.SchemaProps{
																		Type: []string{"object"},
																		Properties: map[string]spec.Schema{
																			"starting_version": {
																				SchemaProps: spec.SchemaProps{
																					Type: []string{"string"},
																				},
																			},
																			"state": {
																				SchemaProps: spec.SchemaProps{
																					Type: []string{"string"},
																					Enum: []interface{}{
																						"new",
																						"dismissed",
																						"failed",
																						"succeeded",
																					},
																				},
																			},
																			"target_version": {
																				SchemaProps: spec.SchemaProps{
																					Type: []string{"string"},
																				},
																			},
																		},
																		Required: []string{
																			"target_version",
																			"starting_version",
																			"state",
																		},
																	}},
															}},
													},
												},
											},
										}},
								},
							},
						},
					},
				},
			},
		},
	},
}

func LocalManifest() app.Manifest {
	return app.NewEmbeddedManifest(appManifestData)
}

func RemoteManifest() app.Manifest {
	return app.NewAPIServerManifest("upgrades")
}

var kindVersionToGoType = map[string]resource.Kind{
	"UpgradeMetadata/v0alpha1": v0alpha1.UpgradeMetadataKind(),
}

// ManifestGoTypeAssociator returns the associated resource.Kind instance for a given Kind and Version, if one exists.
// If there is no association for the provided Kind and Version, exists will return false.
func ManifestGoTypeAssociator(kind, version string) (goType resource.Kind, exists bool) {
	goType, exists = kindVersionToGoType[fmt.Sprintf("%s/%s", kind, version)]
	return goType, exists
}
