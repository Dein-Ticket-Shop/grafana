// Code generated by mockery v2.52.4. DO NOT EDIT.

package secrets

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	resource "github.com/grafana/grafana-app-sdk/resource"

	v1beta1 "github.com/grafana/grafana/apps/secret/pkg/apis/secret/v1beta1"
)

// MockSecureValueClient is an autogenerated mock type for the SecureValueClient type
type MockSecureValueClient struct {
	mock.Mock
}

type MockSecureValueClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSecureValueClient) EXPECT() *MockSecureValueClient_Expecter {
	return &MockSecureValueClient_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, obj, opts
func (_m *MockSecureValueClient) Create(ctx context.Context, obj *v1beta1.SecureValue, opts resource.CreateOptions) (*v1beta1.SecureValue, error) {
	ret := _m.Called(ctx, obj, opts)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *v1beta1.SecureValue
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta1.SecureValue, resource.CreateOptions) (*v1beta1.SecureValue, error)); ok {
		return rf(ctx, obj, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta1.SecureValue, resource.CreateOptions) *v1beta1.SecureValue); ok {
		r0 = rf(ctx, obj, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta1.SecureValue)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1beta1.SecureValue, resource.CreateOptions) error); ok {
		r1 = rf(ctx, obj, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSecureValueClient_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockSecureValueClient_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - obj *v1beta1.SecureValue
//   - opts resource.CreateOptions
func (_e *MockSecureValueClient_Expecter) Create(ctx interface{}, obj interface{}, opts interface{}) *MockSecureValueClient_Create_Call {
	return &MockSecureValueClient_Create_Call{Call: _e.mock.On("Create", ctx, obj, opts)}
}

func (_c *MockSecureValueClient_Create_Call) Run(run func(ctx context.Context, obj *v1beta1.SecureValue, opts resource.CreateOptions)) *MockSecureValueClient_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1beta1.SecureValue), args[2].(resource.CreateOptions))
	})
	return _c
}

func (_c *MockSecureValueClient_Create_Call) Return(_a0 *v1beta1.SecureValue, _a1 error) *MockSecureValueClient_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSecureValueClient_Create_Call) RunAndReturn(run func(context.Context, *v1beta1.SecureValue, resource.CreateOptions) (*v1beta1.SecureValue, error)) *MockSecureValueClient_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, uid, opts
func (_m *MockSecureValueClient) Delete(ctx context.Context, uid string, opts resource.DeleteOptions) error {
	ret := _m.Called(ctx, uid, opts)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, resource.DeleteOptions) error); ok {
		r0 = rf(ctx, uid, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSecureValueClient_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockSecureValueClient_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - opts resource.DeleteOptions
func (_e *MockSecureValueClient_Expecter) Delete(ctx interface{}, uid interface{}, opts interface{}) *MockSecureValueClient_Delete_Call {
	return &MockSecureValueClient_Delete_Call{Call: _e.mock.On("Delete", ctx, uid, opts)}
}

func (_c *MockSecureValueClient_Delete_Call) Run(run func(ctx context.Context, uid string, opts resource.DeleteOptions)) *MockSecureValueClient_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(resource.DeleteOptions))
	})
	return _c
}

func (_c *MockSecureValueClient_Delete_Call) Return(_a0 error) *MockSecureValueClient_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSecureValueClient_Delete_Call) RunAndReturn(run func(context.Context, string, resource.DeleteOptions) error) *MockSecureValueClient_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, uid
func (_m *MockSecureValueClient) Get(ctx context.Context, uid string) (*v1beta1.SecureValue, error) {
	ret := _m.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *v1beta1.SecureValue
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*v1beta1.SecureValue, error)); ok {
		return rf(ctx, uid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *v1beta1.SecureValue); ok {
		r0 = rf(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta1.SecureValue)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSecureValueClient_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockSecureValueClient_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
func (_e *MockSecureValueClient_Expecter) Get(ctx interface{}, uid interface{}) *MockSecureValueClient_Get_Call {
	return &MockSecureValueClient_Get_Call{Call: _e.mock.On("Get", ctx, uid)}
}

func (_c *MockSecureValueClient_Get_Call) Run(run func(ctx context.Context, uid string)) *MockSecureValueClient_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSecureValueClient_Get_Call) Return(_a0 *v1beta1.SecureValue, _a1 error) *MockSecureValueClient_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSecureValueClient_Get_Call) RunAndReturn(run func(context.Context, string) (*v1beta1.SecureValue, error)) *MockSecureValueClient_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, opts
func (_m *MockSecureValueClient) List(ctx context.Context, opts resource.ListOptions) (*v1beta1.SecureValueList, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *v1beta1.SecureValueList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, resource.ListOptions) (*v1beta1.SecureValueList, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, resource.ListOptions) *v1beta1.SecureValueList); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta1.SecureValueList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, resource.ListOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSecureValueClient_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockSecureValueClient_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - opts resource.ListOptions
func (_e *MockSecureValueClient_Expecter) List(ctx interface{}, opts interface{}) *MockSecureValueClient_List_Call {
	return &MockSecureValueClient_List_Call{Call: _e.mock.On("List", ctx, opts)}
}

func (_c *MockSecureValueClient_List_Call) Run(run func(ctx context.Context, opts resource.ListOptions)) *MockSecureValueClient_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(resource.ListOptions))
	})
	return _c
}

func (_c *MockSecureValueClient_List_Call) Return(_a0 *v1beta1.SecureValueList, _a1 error) *MockSecureValueClient_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSecureValueClient_List_Call) RunAndReturn(run func(context.Context, resource.ListOptions) (*v1beta1.SecureValueList, error)) *MockSecureValueClient_List_Call {
	_c.Call.Return(run)
	return _c
}

// Patch provides a mock function with given fields: ctx, uid, req, opts
func (_m *MockSecureValueClient) Patch(ctx context.Context, uid string, req resource.PatchRequest, opts resource.PatchOptions) (*v1beta1.SecureValue, error) {
	ret := _m.Called(ctx, uid, req, opts)

	if len(ret) == 0 {
		panic("no return value specified for Patch")
	}

	var r0 *v1beta1.SecureValue
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, resource.PatchRequest, resource.PatchOptions) (*v1beta1.SecureValue, error)); ok {
		return rf(ctx, uid, req, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, resource.PatchRequest, resource.PatchOptions) *v1beta1.SecureValue); ok {
		r0 = rf(ctx, uid, req, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta1.SecureValue)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, resource.PatchRequest, resource.PatchOptions) error); ok {
		r1 = rf(ctx, uid, req, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSecureValueClient_Patch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Patch'
type MockSecureValueClient_Patch_Call struct {
	*mock.Call
}

// Patch is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - req resource.PatchRequest
//   - opts resource.PatchOptions
func (_e *MockSecureValueClient_Expecter) Patch(ctx interface{}, uid interface{}, req interface{}, opts interface{}) *MockSecureValueClient_Patch_Call {
	return &MockSecureValueClient_Patch_Call{Call: _e.mock.On("Patch", ctx, uid, req, opts)}
}

func (_c *MockSecureValueClient_Patch_Call) Run(run func(ctx context.Context, uid string, req resource.PatchRequest, opts resource.PatchOptions)) *MockSecureValueClient_Patch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(resource.PatchRequest), args[3].(resource.PatchOptions))
	})
	return _c
}

func (_c *MockSecureValueClient_Patch_Call) Return(_a0 *v1beta1.SecureValue, _a1 error) *MockSecureValueClient_Patch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSecureValueClient_Patch_Call) RunAndReturn(run func(context.Context, string, resource.PatchRequest, resource.PatchOptions) (*v1beta1.SecureValue, error)) *MockSecureValueClient_Patch_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, obj, opts
func (_m *MockSecureValueClient) Update(ctx context.Context, obj *v1beta1.SecureValue, opts resource.UpdateOptions) (*v1beta1.SecureValue, error) {
	ret := _m.Called(ctx, obj, opts)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *v1beta1.SecureValue
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta1.SecureValue, resource.UpdateOptions) (*v1beta1.SecureValue, error)); ok {
		return rf(ctx, obj, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta1.SecureValue, resource.UpdateOptions) *v1beta1.SecureValue); ok {
		r0 = rf(ctx, obj, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta1.SecureValue)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1beta1.SecureValue, resource.UpdateOptions) error); ok {
		r1 = rf(ctx, obj, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSecureValueClient_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockSecureValueClient_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - obj *v1beta1.SecureValue
//   - opts resource.UpdateOptions
func (_e *MockSecureValueClient_Expecter) Update(ctx interface{}, obj interface{}, opts interface{}) *MockSecureValueClient_Update_Call {
	return &MockSecureValueClient_Update_Call{Call: _e.mock.On("Update", ctx, obj, opts)}
}

func (_c *MockSecureValueClient_Update_Call) Run(run func(ctx context.Context, obj *v1beta1.SecureValue, opts resource.UpdateOptions)) *MockSecureValueClient_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1beta1.SecureValue), args[2].(resource.UpdateOptions))
	})
	return _c
}

func (_c *MockSecureValueClient_Update_Call) Return(_a0 *v1beta1.SecureValue, _a1 error) *MockSecureValueClient_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSecureValueClient_Update_Call) RunAndReturn(run func(context.Context, *v1beta1.SecureValue, resource.UpdateOptions) (*v1beta1.SecureValue, error)) *MockSecureValueClient_Update_Call {
	_c.Call.Return(run)
	return _c
}

// Watch provides a mock function with given fields: ctx, opts
func (_m *MockSecureValueClient) Watch(ctx context.Context, opts resource.WatchOptions) (resource.WatchResponse, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for Watch")
	}

	var r0 resource.WatchResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, resource.WatchOptions) (resource.WatchResponse, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, resource.WatchOptions) resource.WatchResponse); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(resource.WatchResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, resource.WatchOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSecureValueClient_Watch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Watch'
type MockSecureValueClient_Watch_Call struct {
	*mock.Call
}

// Watch is a helper method to define mock.On call
//   - ctx context.Context
//   - opts resource.WatchOptions
func (_e *MockSecureValueClient_Expecter) Watch(ctx interface{}, opts interface{}) *MockSecureValueClient_Watch_Call {
	return &MockSecureValueClient_Watch_Call{Call: _e.mock.On("Watch", ctx, opts)}
}

func (_c *MockSecureValueClient_Watch_Call) Run(run func(ctx context.Context, opts resource.WatchOptions)) *MockSecureValueClient_Watch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(resource.WatchOptions))
	})
	return _c
}

func (_c *MockSecureValueClient_Watch_Call) Return(_a0 resource.WatchResponse, _a1 error) *MockSecureValueClient_Watch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSecureValueClient_Watch_Call) RunAndReturn(run func(context.Context, resource.WatchOptions) (resource.WatchResponse, error)) *MockSecureValueClient_Watch_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSecureValueClient creates a new instance of MockSecureValueClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSecureValueClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSecureValueClient {
	mock := &MockSecureValueClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
