// Code generated by mockery v2.53.4. DO NOT EDIT.

package contracts

import (
	context "context"

	v0alpha1 "github.com/grafana/grafana/pkg/apimachinery/apis/common/v0alpha1"
	mock "github.com/stretchr/testify/mock"
)

// MockInlineSecureValueStore is an autogenerated mock type for the InlineSecureValueStore type
type MockInlineSecureValueStore struct {
	mock.Mock
}

type MockInlineSecureValueStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInlineSecureValueStore) EXPECT() *MockInlineSecureValueStore_Expecter {
	return &MockInlineSecureValueStore_Expecter{mock: &_m.Mock}
}

// CanReference provides a mock function with given fields: ctx, owner, values
func (_m *MockInlineSecureValueStore) CanReference(ctx context.Context, owner v0alpha1.ResourceReference, values map[string]v0alpha1.InlineSecureValue) (bool, error) {
	ret := _m.Called(ctx, owner, values)

	if len(ret) == 0 {
		panic("no return value specified for CanReference")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, v0alpha1.ResourceReference, map[string]v0alpha1.InlineSecureValue) (bool, error)); ok {
		return rf(ctx, owner, values)
	}
	if rf, ok := ret.Get(0).(func(context.Context, v0alpha1.ResourceReference, map[string]v0alpha1.InlineSecureValue) bool); ok {
		r0 = rf(ctx, owner, values)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, v0alpha1.ResourceReference, map[string]v0alpha1.InlineSecureValue) error); ok {
		r1 = rf(ctx, owner, values)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInlineSecureValueStore_CanReference_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CanReference'
type MockInlineSecureValueStore_CanReference_Call struct {
	*mock.Call
}

// CanReference is a helper method to define mock.On call
//   - ctx context.Context
//   - owner v0alpha1.ResourceReference
//   - values map[string]v0alpha1.InlineSecureValue
func (_e *MockInlineSecureValueStore_Expecter) CanReference(ctx interface{}, owner interface{}, values interface{}) *MockInlineSecureValueStore_CanReference_Call {
	return &MockInlineSecureValueStore_CanReference_Call{Call: _e.mock.On("CanReference", ctx, owner, values)}
}

func (_c *MockInlineSecureValueStore_CanReference_Call) Run(run func(ctx context.Context, owner v0alpha1.ResourceReference, values map[string]v0alpha1.InlineSecureValue)) *MockInlineSecureValueStore_CanReference_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(v0alpha1.ResourceReference), args[2].(map[string]v0alpha1.InlineSecureValue))
	})
	return _c
}

func (_c *MockInlineSecureValueStore_CanReference_Call) Return(_a0 bool, _a1 error) *MockInlineSecureValueStore_CanReference_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInlineSecureValueStore_CanReference_Call) RunAndReturn(run func(context.Context, v0alpha1.ResourceReference, map[string]v0alpha1.InlineSecureValue) (bool, error)) *MockInlineSecureValueStore_CanReference_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSecureValues provides a mock function with given fields: ctx, owner, values
func (_m *MockInlineSecureValueStore) UpdateSecureValues(ctx context.Context, owner v0alpha1.ResourceReference, values map[string]v0alpha1.InlineSecureValue) (map[string]v0alpha1.InlineSecureValue, error) {
	ret := _m.Called(ctx, owner, values)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSecureValues")
	}

	var r0 map[string]v0alpha1.InlineSecureValue
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, v0alpha1.ResourceReference, map[string]v0alpha1.InlineSecureValue) (map[string]v0alpha1.InlineSecureValue, error)); ok {
		return rf(ctx, owner, values)
	}
	if rf, ok := ret.Get(0).(func(context.Context, v0alpha1.ResourceReference, map[string]v0alpha1.InlineSecureValue) map[string]v0alpha1.InlineSecureValue); ok {
		r0 = rf(ctx, owner, values)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]v0alpha1.InlineSecureValue)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, v0alpha1.ResourceReference, map[string]v0alpha1.InlineSecureValue) error); ok {
		r1 = rf(ctx, owner, values)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInlineSecureValueStore_UpdateSecureValues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSecureValues'
type MockInlineSecureValueStore_UpdateSecureValues_Call struct {
	*mock.Call
}

// UpdateSecureValues is a helper method to define mock.On call
//   - ctx context.Context
//   - owner v0alpha1.ResourceReference
//   - values map[string]v0alpha1.InlineSecureValue
func (_e *MockInlineSecureValueStore_Expecter) UpdateSecureValues(ctx interface{}, owner interface{}, values interface{}) *MockInlineSecureValueStore_UpdateSecureValues_Call {
	return &MockInlineSecureValueStore_UpdateSecureValues_Call{Call: _e.mock.On("UpdateSecureValues", ctx, owner, values)}
}

func (_c *MockInlineSecureValueStore_UpdateSecureValues_Call) Run(run func(ctx context.Context, owner v0alpha1.ResourceReference, values map[string]v0alpha1.InlineSecureValue)) *MockInlineSecureValueStore_UpdateSecureValues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(v0alpha1.ResourceReference), args[2].(map[string]v0alpha1.InlineSecureValue))
	})
	return _c
}

func (_c *MockInlineSecureValueStore_UpdateSecureValues_Call) Return(_a0 map[string]v0alpha1.InlineSecureValue, _a1 error) *MockInlineSecureValueStore_UpdateSecureValues_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInlineSecureValueStore_UpdateSecureValues_Call) RunAndReturn(run func(context.Context, v0alpha1.ResourceReference, map[string]v0alpha1.InlineSecureValue) (map[string]v0alpha1.InlineSecureValue, error)) *MockInlineSecureValueStore_UpdateSecureValues_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockInlineSecureValueStore creates a new instance of MockInlineSecureValueStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInlineSecureValueStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInlineSecureValueStore {
	mock := &MockInlineSecureValueStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
