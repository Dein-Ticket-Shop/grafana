// Code generated by mockery v2.53.4. DO NOT EDIT.

package contracts

import (
	context "context"

	v0alpha1 "github.com/grafana/grafana/pkg/apimachinery/apis/common/v0alpha1"
	mock "github.com/stretchr/testify/mock"
)

// MockInlineSecureValueStore is an autogenerated mock type for the InlineSecureValueStore type
type MockInlineSecureValueStore struct {
	mock.Mock
}

type MockInlineSecureValueStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInlineSecureValueStore) EXPECT() *MockInlineSecureValueStore_Expecter {
	return &MockInlineSecureValueStore_Expecter{mock: &_m.Mock}
}

// CanReference provides a mock function with given fields: ctx, owner, names
func (_m *MockInlineSecureValueStore) CanReference(ctx context.Context, owner v0alpha1.ResourceReference, names ...string) (bool, error) {
	_va := make([]interface{}, len(names))
	for _i := range names {
		_va[_i] = names[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, owner)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CanReference")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, v0alpha1.ResourceReference, ...string) (bool, error)); ok {
		return rf(ctx, owner, names...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, v0alpha1.ResourceReference, ...string) bool); ok {
		r0 = rf(ctx, owner, names...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, v0alpha1.ResourceReference, ...string) error); ok {
		r1 = rf(ctx, owner, names...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInlineSecureValueStore_CanReference_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CanReference'
type MockInlineSecureValueStore_CanReference_Call struct {
	*mock.Call
}

// CanReference is a helper method to define mock.On call
//   - ctx context.Context
//   - owner v0alpha1.ResourceReference
//   - names ...string
func (_e *MockInlineSecureValueStore_Expecter) CanReference(ctx interface{}, owner interface{}, names ...interface{}) *MockInlineSecureValueStore_CanReference_Call {
	return &MockInlineSecureValueStore_CanReference_Call{Call: _e.mock.On("CanReference",
		append([]interface{}{ctx, owner}, names...)...)}
}

func (_c *MockInlineSecureValueStore_CanReference_Call) Run(run func(ctx context.Context, owner v0alpha1.ResourceReference, names ...string)) *MockInlineSecureValueStore_CanReference_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(v0alpha1.ResourceReference), variadicArgs...)
	})
	return _c
}

func (_c *MockInlineSecureValueStore_CanReference_Call) Return(_a0 bool, _a1 error) *MockInlineSecureValueStore_CanReference_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInlineSecureValueStore_CanReference_Call) RunAndReturn(run func(context.Context, v0alpha1.ResourceReference, ...string) (bool, error)) *MockInlineSecureValueStore_CanReference_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSecureValue provides a mock function with given fields: ctx, owner, value
func (_m *MockInlineSecureValueStore) CreateSecureValue(ctx context.Context, owner v0alpha1.ResourceReference, value v0alpha1.RawSecretValue) (string, error) {
	ret := _m.Called(ctx, owner, value)

	if len(ret) == 0 {
		panic("no return value specified for CreateSecureValue")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, v0alpha1.ResourceReference, v0alpha1.RawSecretValue) (string, error)); ok {
		return rf(ctx, owner, value)
	}
	if rf, ok := ret.Get(0).(func(context.Context, v0alpha1.ResourceReference, v0alpha1.RawSecretValue) string); ok {
		r0 = rf(ctx, owner, value)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, v0alpha1.ResourceReference, v0alpha1.RawSecretValue) error); ok {
		r1 = rf(ctx, owner, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInlineSecureValueStore_CreateSecureValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSecureValue'
type MockInlineSecureValueStore_CreateSecureValue_Call struct {
	*mock.Call
}

// CreateSecureValue is a helper method to define mock.On call
//   - ctx context.Context
//   - owner v0alpha1.ResourceReference
//   - value v0alpha1.RawSecretValue
func (_e *MockInlineSecureValueStore_Expecter) CreateSecureValue(ctx interface{}, owner interface{}, value interface{}) *MockInlineSecureValueStore_CreateSecureValue_Call {
	return &MockInlineSecureValueStore_CreateSecureValue_Call{Call: _e.mock.On("CreateSecureValue", ctx, owner, value)}
}

func (_c *MockInlineSecureValueStore_CreateSecureValue_Call) Run(run func(ctx context.Context, owner v0alpha1.ResourceReference, value v0alpha1.RawSecretValue)) *MockInlineSecureValueStore_CreateSecureValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(v0alpha1.ResourceReference), args[2].(v0alpha1.RawSecretValue))
	})
	return _c
}

func (_c *MockInlineSecureValueStore_CreateSecureValue_Call) Return(_a0 string, _a1 error) *MockInlineSecureValueStore_CreateSecureValue_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInlineSecureValueStore_CreateSecureValue_Call) RunAndReturn(run func(context.Context, v0alpha1.ResourceReference, v0alpha1.RawSecretValue) (string, error)) *MockInlineSecureValueStore_CreateSecureValue_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteValuesForOwner provides a mock function with given fields: ctx, owner, names
func (_m *MockInlineSecureValueStore) DeleteValuesForOwner(ctx context.Context, owner v0alpha1.ResourceReference, names ...string) error {
	_va := make([]interface{}, len(names))
	for _i := range names {
		_va[_i] = names[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, owner)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteValuesForOwner")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, v0alpha1.ResourceReference, ...string) error); ok {
		r0 = rf(ctx, owner, names...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInlineSecureValueStore_DeleteValuesForOwner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteValuesForOwner'
type MockInlineSecureValueStore_DeleteValuesForOwner_Call struct {
	*mock.Call
}

// DeleteValuesForOwner is a helper method to define mock.On call
//   - ctx context.Context
//   - owner v0alpha1.ResourceReference
//   - names ...string
func (_e *MockInlineSecureValueStore_Expecter) DeleteValuesForOwner(ctx interface{}, owner interface{}, names ...interface{}) *MockInlineSecureValueStore_DeleteValuesForOwner_Call {
	return &MockInlineSecureValueStore_DeleteValuesForOwner_Call{Call: _e.mock.On("DeleteValuesForOwner",
		append([]interface{}{ctx, owner}, names...)...)}
}

func (_c *MockInlineSecureValueStore_DeleteValuesForOwner_Call) Run(run func(ctx context.Context, owner v0alpha1.ResourceReference, names ...string)) *MockInlineSecureValueStore_DeleteValuesForOwner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(v0alpha1.ResourceReference), variadicArgs...)
	})
	return _c
}

func (_c *MockInlineSecureValueStore_DeleteValuesForOwner_Call) Return(_a0 error) *MockInlineSecureValueStore_DeleteValuesForOwner_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInlineSecureValueStore_DeleteValuesForOwner_Call) RunAndReturn(run func(context.Context, v0alpha1.ResourceReference, ...string) error) *MockInlineSecureValueStore_DeleteValuesForOwner_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockInlineSecureValueStore creates a new instance of MockInlineSecureValueStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInlineSecureValueStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInlineSecureValueStore {
	mock := &MockInlineSecureValueStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
