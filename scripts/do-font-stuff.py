#!/usr/bin/env python3
"""
Generate a JavaScript mapping for 'tnum' (tabular numbers) glyph substitutions
from an OpenType font using fontTools.
"""
import sys
import json
import logging
from fontTools.ttLib import TTFont


def load_font(font_path: str) -> TTFont:
    """Load a font file and return a TTFont object."""
    try:
        return TTFont(font_path)
    except Exception as e:
        logging.error("Failed to load font '%s': %s", font_path, e)
        sys.exit(1)


def get_tnum_substitution_mapping(font: TTFont) -> dict[str, str]:
    """
    Extract the glyph substitution mapping for the 'tnum' feature.
    Returns a dict mapping source glyph names to destination glyph names.
    """
    if "GSUB" not in font:
        logging.error("No GSUB table found in the font.")
        return {}

    gsub = font["GSUB"].table
    # Collect all 'tnum' features
    tnum_records = [rec for rec in gsub.FeatureList.FeatureRecord if rec.FeatureTag == "tnum"]
    if not tnum_records:
        logging.error("No 'tnum' feature found in GSUB table.")
        return {}

    # Assume the first 'tnum' feature
    lookup_indices = tnum_records[0].Feature.LookupListIndex
    for idx in lookup_indices:
        lookup = gsub.LookupList.Lookup[idx]
        for subtable in lookup.SubTable:
            subtable.ensureDecompiled()
            if hasattr(subtable, 'mapping'):
                return subtable.mapping

    logging.error("'tnum' feature has no substitution mappings.")
    return {}


def build_glyph_to_codepoint_map(font: TTFont) -> dict[str, list[int]]:
    """
    Build a reverse cmap (glyph name -> list of Unicode codepoints).
    """
    best_cmap = font.getBestCmap()
    glyph2cp: dict[str, list[int]] = {}
    for codepoint, glyph in best_cmap.items():
        glyph2cp.setdefault(glyph, []).append(codepoint)
    return glyph2cp


def mapping_to_codepoint_map(
    glyph_map: dict[str, str],
    glyph2cp: dict[str, list[int]]
) -> dict[int, int]:
    """
    Convert a glyph-name mapping to a codepoint mapping (int -> int).
    Only keeps entries where both source and destination glyphs map to exactly one codepoint.
    Raises ValueError if digits 0-9 are missing.
    """
    cp_map: dict[int, int] = {}
    for src_glyph, dst_glyph in glyph_map.items():
        src_cps = glyph2cp.get(src_glyph, [])
        dst_cps = glyph2cp.get(dst_glyph, [])
        if len(src_cps) == 1 and len(dst_cps) == 1:
            cp_map[src_cps[0]] = dst_cps[0]
        else:
            logging.warning(
                "Skipping glyph '%s'→'%s' with codepoints %s→%s",
                src_glyph, dst_glyph, src_cps, dst_cps
            )

    # Ensure digits 0x30-0x39 (0-9) are present
    missing = [cp for cp in range(0x30, 0x3A) if cp not in cp_map]
    if missing:
        raise ValueError(
            f"Missing digit mappings: {', '.join(hex(cp) for cp in missing)}"
        )
    return cp_map


def format_js_mapping(cp_map: dict[int, int]) -> str:
    """
    Format the codepoint mapping as a JavaScript array of [regex, replacement] pairs.
    """
    entries = []
    for src, dst in sorted(cp_map.items()):
        entries.append(
          # Note that the first value is a *regex* pattern with unicode escape sequences (\u{xxx})
          # and the second value is a *string* with a unicode escape sequence (\uxxx).
          f"/* {chr(src)} */ ['\\u{src:04x}', '\\u{dst:04x}']"
        )

    js_array = "[\n  " + ",\n  ".join(entries) + "\n]"
    js_file = (
        "// This file is auto-generated by fontstuff.gen.py\n"
        "// Do not edit manually.\n"
        "// Run python ./scripts/do-font-stuff.py public/fonts/inter/Inter-Regular.woff2 > packages/grafana-ui/src/utils/tnumReplacements.gen.ts\n"
        "// Generated from font: " + sys.argv[1] + "\n"
        "const tnumMappings: Map<string, string> = new Map(" + js_array + ");\n"
        "export default tnumMappings;\n"
    )
    return js_file


def main():
    if len(sys.argv) != 2:
        print(f"Usage: {sys.argv[0]} <font-file>")
        sys.exit(1)

    logging.basicConfig(level=logging.DEBUG, format='%(levelname)s: %(message)s')
    font_path = sys.argv[1]

    font = load_font(font_path)
    glyph_map = get_tnum_substitution_mapping(font)
    if not glyph_map:
        sys.exit(0)

    glyph2cp = build_glyph_to_codepoint_map(font)
    cp_map = mapping_to_codepoint_map(glyph_map, glyph2cp)

    # Output JS mapping
    js_map = format_js_mapping(cp_map)
    print(js_map)


if __name__ == '__main__':
    main()
